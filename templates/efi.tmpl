<%page args="configdir, KERNELDIR, efiarch32, efiarch64, isolabel"/>
<%
EFIARCH_LOWER=efiarch.lower()
EFIBOOTDIR="EFI/BOOT"
APPLE_EFI_ICON=inroot+"/usr/share/pixmaps/bootloader/fedora.icns"
APPLE_EFI_DISKNAME=inroot+"/usr/share/pixmaps/bootloader/fedora-media.vol"
%>

mkdir ${EFIBOOTDIR}
mkdir ${EFIBOOTDIR}/fonts/
## Install grub only (no shim), as we don't have SecureBoot-signed xen/kernel
## Create custom grub image, to include multiboot2 module
<%
grub_modules = "  all_video boot btrfs         \
    cat configfile                  \
    echo efifwsetup efinet ext2       \
    fat font gfxmenu gfxterm gzio           \
    halt hfsplus http increment iso9660 jpeg    \
    loadenv loopback linux lvm lsefi lsefimmap \
    mdraid09 mdraid1x minicmd net           \
    normal part_apple part_msdos part_gpt       \
    password_pbkdf2 png reboot          \
    search search_fs_uuid search_fs_file        \
    search_label serial sleep syslinuxcfg test tftp \
    video xfs \
    backtrace chain usb usbserial_common usbserial_pl2303 usbserial_ftdi usbserial_usbdebug"
grub_modules += " multiboot2"
%>

runcmd chroot ${inroot} mkdir -p /boot/efi/EFI/qubes
runcmd chroot ${inroot} grub2-mkimage -O x86_64-efi \
    -o /boot/efi/EFI/qubes/BOOT${efiarch}.EFI \
    -p /EFI/BOOT ${grub_modules}
install boot/efi/EFI/qubes/BOOT${efiarch}.EFI ${EFIBOOTDIR}/BOOT${efiarch}.EFI

## actually make the EFI images
${make_efiboot("images/efiboot.img")}

## This is kinda gross, but then... so's EFI.
<%def name="make_efiboot(img, include_kernel=False, disk=False, imgtype='default')">
    <%
    kdir = EFIBOOTDIR if include_kernel else KERNELDIR
    eficonf = "%s/grub.cfg" % (EFIBOOTDIR, )
    args = "--label=ANACONDA --debug"
    if disk: args += " --disk"
    %>
    %if include_kernel:
        copy ${KERNELDIR}/vmlinuz ${EFIBOOTDIR}
        runcmd chroot ${inroot} mkdir -p /boot/efi/EFI/qubes
        runcmd chroot ${inroot} touch /proc/modules
        runcmd chroot ${inroot} dracut --conf /dev/null --confdir /var/empty \
            --nomdadmconf --nolvmconf --nofscks --no-early-microcode \
            --no-hostonly --xz --install '/.buildstamp' \
            --add 'anaconda pollcdrom dmsquash-live' \
            --omit="${extra_dracut_modules}" --omit-drivers="${scsi_modules}" --omit-drivers="${extra_modules}" \
            /boot/efi/EFI/qubes/initrd-small.img ${kver}
        runcmd chroot ${inroot} rm -f /proc/modules
        install boot/efi/EFI/qubes/initrd-small.img ${EFIBOOTDIR}/initrd.img
    %endif
    install ${configdir}/grub2-efi.cfg ${eficonf}
    replace @PRODUCT@ '${product.name}' ${eficonf}
    replace @VERSION@ ${product.version} ${eficonf}
    replace @KERNELNAME@ vmlinuz ${eficonf}
    replace @KERNELPATH@ /${kdir}/vmlinuz ${eficonf}
    replace @INITRDPATH@ /${kdir}/initrd.img ${eficonf}
    replace @ISOLABEL@ '${isolabel}' ${eficonf}
    %if disk:
        replace @ROOT@ inst.stage2=hd:LABEL=ANACONDA ${eficonf}
    %else:
        replace @ROOT@ 'inst.stage2=hd:LABEL=${isolabel|udev}' ${eficonf}
    %endif
    %if efiarch32 == 'IA32':
        copy ${eficonf} ${EFIBOOTDIR}/BOOT.conf
    %endif
    runcmd mkefiboot ${args} ${outroot}/${EFIBOOTDIR} ${outroot}/${img}
    %if include_kernel:
        remove ${EFIBOOTDIR}/vmlinuz
        remove ${EFIBOOTDIR}/initrd.img
    %endif
</%def>
